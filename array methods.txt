
Array.from(arrayLike, fn, thisArg)

arrayLike - массивоподобный или итерируемый объект, преобразуемый в массив.
mapFn (необязательный) - отображающая функция, вызываемая для каждого элемента массива.
thisArg (необязательный) - значение, используемое в качестве this при выполнении функции mapFn

Описание: Метод Array.from() создаёт новый экземпляр Array из массивоподобного или итерируемого объекта.

Возвращаемое значение: Новый экземпляр Array

Примеры:

Array.from('foo'); // ['f', 'o', 'o']

function f() {
  return Array.from(arguments);
}
f(1, 2, 3); // [1, 2, 3]

Array.from([1, 2, 3], x => x + x); // [2, 4, 6]

====

Array.isArray(obj)

obj - Объект для проверки

Описание: Метод Array.isArray() возвращает true, если объект является массивом и false, если он массивом не является.

Возвращаемое значение: true если объект является Array; иначе, false.

Примеры:

// Все следующие вызовы вернут true
Array.isArray([]);
Array.isArray([1]);

// Все следующие вызовы вернут false
Array.isArray();
Array.isArray({});

====

Array.of(element0, element1, elementN)

elementN - Элементы, из которых создаётся массив.

Описание: Метод Array.of() создаёт новый экземпляр массива Array из произвольного числа аргументов, вне зависимости от числа или типа аргумента.

Возвращаемое значение: Новый массив Array.

Примеры:

Array.of(1);         // [1]
Array.of(1, 2, 3);   // [1, 2, 3]
Array.of(undefined); // [undefined]

====

Array.prototype.concat(value1, value2, valueN)

valueN - Массивы и/или значения, соединяемые в новый массив. Смотрите описание ниже.

Описание: Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими массивами и/или значениями, переданными в качестве аргументов.

Возвращаемое значение: Новый экземпляр Array.

Примеры:

var num1 = [1, 2, 3],
    num2 = [4, 5, 6],
    num3 = [7, 8, 9];

num1.concat(num2, num3); // [1, 2, 3, 4, 5, 6, 7, 8, 9]

====

Array.prototype.every(callback(currentValue, index array), thisArg)

callback - Функция проверки каждого элемента, принимает три аргумента:
currentValue - Текущий обрабатываемый элемент массива.
index (Необязательный) - Индекс текущего обрабатываемого элемента массива.
array (Необязательный) - Массив, по которому осуществляется проход.
thisArg (Необязательный) - Значение, используемое в качестве this при выполнении функции callback.

Описание: Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
Если найден элемент неудовлетворяющий условию, метод every() немедленно вернёт false.

Возвращаемое значение: true если функция проверки возвращает truthy значение для каждого элемента массива. Иначе, false.

Примеры:
function isBigEnough(element, index, array) {
  return element >= 10;
}
[12, 5, 8, 130, 44].every(isBigEnough);   // false
[12, 54, 18, '130', 44].every(isBigEnough); // true

====

Array.prototype.filter(callback(element, index, array), thisArg)

callback - Функция, которая будет вызвана для каждого элемента массива. Если функция возвращает true, то элемент остаётся в массиве, если false, то удаляется.

element - Текущий обрабатываемый элемент в массиве.
index (Необязательный) - Индекс текущего обрабатываемого элемента в массиве.
array (Необязательный) - Массив, по которому осуществляется проход.
thisArg (Необязательный) - Значение, используемое в качестве this при вызове функции callback.

Описание: Метод filter() вызывает переданную функцию callback один раз для каждого элемента, присутствующего в массиве, и конструирует новый массив со всеми значениями, для которых функция callback вернула true или значение, становящееся true при приведении в boolean. Функция callback вызывается только для индексов массива, имеющих присвоенные значения; она не вызывается для индексов, которые были удалены или которым значения никогда не присваивались. Элементы массива, не прошедшие проверку функцией callback, просто пропускаются и не включаются в новый массив.

Возвращаемое значение: Вернётся новый массив с элементами, которые проходят тест, то есть callback вернёт true. Если ни один элемент не пройдёт тест, то будет возвращён пустой массив.

Примеры:

function isBigEnough(value) {
  return value >= 10;
}

let filtered = [12, 5, 8, 130, 44].filter(isBigEnough); // массив filtered равен [12, 130, 44]

===

Array.prototype.find(callback, thisArg)

callback - Функция, вызывающаяся для каждого значения в массиве, принимает три аргумента:
element - Текущий обрабатываемый элемент в массиве.
index - Индекс текущего обрабатываемого элемента в массиве.
array - Массив, по которому осуществляется проход.
thisArg (Необязательный) - Значение, используемое в качестве this при выполнении функции callback.

Описание: Метод find вызывает переданную функцию callback один раз для каждого элемента, присутствующего в массиве, до тех пор, пока она не вернёт true. Если такой элемент найден, метод find немедленно вернёт значение этого элемента. В противном случае, метод find вернёт undefined.

Возвращаемое значение: Значение элемента из массива, если элемент прошёл проверку, иначе undefined.

Примеры:
/*
Следующий пример находит в массиве положительных чисел элемент, являющийся простым числом (либо возвращает undefined, если в массиве нет простых чисел).
*/

function isPrime(element, index, array) {
  var start = 2;
  while (start <= Math.sqrt(element)) {
    if (element % start++ < 1) {
      return false;
    }
  }
  return element > 1;
}

console.log([4, 6, 8, 12].find(isPrime)); // undefined, не найдено
console.log([4, 5, 8, 12].find(isPrime)); // 5

=====

Array.prototype.findIndex(callback, thisArg)

callback - Функция, вызывающаяся для каждого значения в масиве, принимает три аргумента:
element - Текущий обрабатываемый элемент в массиве.
index - Индекс текущего обрабатываемого элемента в массиве.
array - Массив, по которому осуществляется проход.
thisArg (Необязательный) -  Значение, используемое в качестве this при выполнении функции callback.

Описание: Метод findIndex вызывает переданную функцию callback один раз для каждого элемента, присутствующего в массиве, до тех пор, пока она не вернёт true. Если такой элемент найден, метод findIndex немедленно вернёт индекс этого элемента. В противном случае, метод findIndex вернёт -1.
Возвращаемое значение: индекс элемента или -1

Примеры:

/*
Следующий пример находит в массиве индекс элемента, являющийся простым числом (либо возвращает -1, если в массиве нет простых чисел).
*/

function isPrime(element, index, array) {
  var start = 2;
  while (start <= Math.sqrt(element)) {
    if (element % start++ < 1) {
      return false;
    }
  }
  return element > 1;
}

console.log([4, 6, 8, 12].findIndex(isPrime)); // -1, не найдено
console.log([4, 6, 7, 12].findIndex(isPrime)); // 2

=====

Array.prototype.flat(depth)

depth (Необязательный) - На сколько уровней вложенности уменьшается мерность исходного массива. По-умолчанию 1.

Описание: Метод flat() возвращает новый массив, в котором все элементы вложенных подмассивов были рекурсивно "подняты" на указанный уровень depth
Возвращаемое значение: Новый массив с объединенными в него подмассивами.

Примеры:

/*
Упрощение вложенных массивов
*/

var arr1 = [1, 2, [3, 4]];
arr1.flat(); // [1, 2, 3, 4]

var arr2 = [1, 2, [3, 4, [5, 6]]];
arr2.flat(); // [1, 2, 3, 4, [5, 6]]

var arr3 = [1, 2, [3, 4, [5, 6]]];
arr3.flat(2); // [1, 2, 3, 4, 5, 6]

var arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];
arr4.flat(Infinity); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

/*
Упрощение и "дырки" в массивах
*/

var arr4 = [1, 2, , 4, 5];
arr4.flat(); // [1, 2, 4, 5]

=====

Array.prototype.flatMap(callback(currentValue, index, array), thisArg)

callback - Функция которая производит элементы нового массива, принимает три аргумента:
currentValue - Текущий обрабатываемый элемент массива.
index (Необязательный) - Индекс обрабатываемого элемента в массиве.
array (Необязательный) - Массив по которому осуществляется обход.
thisArg (Необязательный) - Значение используемое в качестве this при вызове функции callback.

Описание: Метод flatMap() сначала применяет функцию к каждому элементу, а затем преобразует полученый результат в плоскую структуру и помещает в новый массив.
Возвращаемое значение: Новый массив
