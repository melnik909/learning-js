Куки

Куки – это небольшие строки данных, которые хранятся непосредственно в браузере.
Они являются частью HTTP-протокола, определённого в спецификации RFC 6265.

Куки обычно устанавливаются веб-сервером при помощи заголовка Set-Cookie. Затем
браузер будет автоматически добавлять их в (почти) каждый запрос на тот же домен
при помощи заголовка Cookie.

document.cookie - чтение куки

Значение document.cookie состоит из пар ключ=значение, разделённых ;.
Каждая пара представляет собой отдельное куки.

Запись в document.cookie

document.cookie = "user=John"; // обновляем только куки с именем 'user'
alert(document.cookie); // показываем все куки

Если вы запустите этот код, то, скорее всего, увидите множество куки. Это
происходит, потому что операция document.cookie= перезапишет не все куки, а
лишь куки с вышеупомянутым именем user.

Технически, и имя и значение куки могут состоять из любых символов, для
правильного форматирования следует использовать встроенную функцию encodeURIComponent:

После encodeURIComponent пара name=value не должна занимать более 4Кб.
Таким образом, мы не можем хранить в куки большие данные.

Общее количество куки на один домен ограничивается примерно 20+.
Точное ограничение зависит от конкретного браузера

Настройки
document.cookie = "user=John; path=/; expires=Tue, 19 Jan 2038 03:14:07 GMT"

path
URL-префикс пути, куки будут доступны для страниц под этим путём. Должен быть
абсолютным. По умолчанию используется текущий путь.

Если куки установлено с path=/admin, то оно будет доступно на страницах /admin
и /admin/something, но не на страницах /home или /adminpage.

domain
Домен, на котором доступны наши куки.

По умолчанию куки доступно лишь тому домену, который его установил.
Так что куки, которые были установлены сайтом site.com и никогда не получит куки на сайте other.com.

Мы не сможем получить эти куки на поддомене forum.site.com

Мы можем дать поддоменам типа forum.site.com доступ к куки. Для этого
достаточно при установке куки на сайте site.com в качестве значения опции domain
указать корневой домен: domain=site.com:

// находясь на странице site.com
// сделаем куки доступным для всех поддоменов *.site.com:
document.cookie = "user=John; domain=site.com"

// позже

// на forum.site.com
alert(document.cookie); // есть куки user=John

expires

По умолчанию, если куки не имеют ни одного из этих параметров, то они удалятся
при закрытии браузера. Такие куки называются сессионными («session cookies»).

Чтобы помочь куки «пережить» закрытие браузера, мы можем установить значение опций expires или max-age.
expires=Tue, 19 Jan 2038 03:14:07 GMT

Дата должна быть точно в этом формате, во временной зоне GMT. Мы можем использовать date.toUTCString,
чтобы получить правильную дату. Например, мы можем установить срок действия куки на 1 день.

// +1 день от текущей даты
let date = new Date(Date.now() + 86400e3);
date = date.toUTCString();
document.cookie = "user=John; expires=" + date;

max-age=3600

Альтернатива expires, определяет срок действия куки в секундах с текущего момента.

// куки будет удалено через 1 час
document.cookie = "user=John; max-age=3600";

Если задан ноль или отрицательное значение, то куки будет удалено:

// удалим куки (срок действия истекает прямо сейчас)
document.cookie = "user=John; max-age=0";

secure

Куки следует передавать только по HTTPS-протоколу. По умолчанию куки, установленные
сайтом http://site.com, также будут доступны на сайте https://site.com и наоборот.

С настройкой secure, если куки будет установлено на сайте https://site.com, то оно не
будет доступно на том же сайте с протоколом HTTP, как http://site.com. Таким образом,
если в куки хранится конфиденциальная информация, которую не следует передавать по
незашифрованному протоколу HTTP, то нужно установить этот флаг.

// предполагается, что сейчас мы на https://
// установим опцию secure для куки (куки доступно только через HTTPS)
document.cookie = "user=John; secure";

====

LocalStorage, sessionStorage

Отличия от куки:
1. В отличие от куки, объекты веб-хранилища не отправляются на сервер при каждом запросе.
Поэтому мы можем хранить гораздо больше данных. Большинство браузеров могут сохранить как
минимум 2 мегабайта данных (или больше), и этот размер можно поменять в настройках.

2. Ещё одно отличие от куки – сервер не может манипулировать объектами хранилища через HTTP-заголовки.
Всё делается при помощи JavaScript.

3. Хранилище привязано к источнику (домен/протокол/порт). Это значит, что разные протоколы
или поддомены определяют разные объекты хранилища, и они не могут получить доступ к данным друг друга.

Объекты хранилища localStorage и sessionStorage предоставляют одинаковые методы и свойства:

setItem(key, value) – сохранить пару ключ/значение.
getItem(key) – получить данные по ключу key.
removeItem(key) – удалить данные с ключом key.
clear() – удалить всё.
key(index) – получить ключ на заданной позиции.
length – количество элементов в хранилище.

localStorage

Основные особенности localStorage:

1. Этот объект один на все вкладки и окна в рамках источника (один и тот же домен/протокол/порт).

2. Данные не имеют срока давности, по которому истекают и удаляются. Сохраняются после перезапуска
браузера и даже ОС.

Перебор ключей

let keys = Object.keys(localStorage);
for(let key of keys) {
  alert(`${key}: ${localStorage.getItem(key)}`);
}

Обратите внимание, что ключ и значение должны быть строками. Если мы используем
любой другой тип, например число или объект, то он автоматически преобразуется в строку:

sessionStorage.user = {name: "John"};
alert(sessionStorage.user); // [object Object]

sessionStorage

Основные особенности sessionStorage:

1. sessionStorage существует только в рамках текущей вкладки браузера. Другая
вкладка с той же страницей будет иметь другое хранилище.

2. Данные продолжают существовать после перезагрузки страницы, но не после закрытия/открытия вкладки.

Событие storage

Когда обновляются данные в localStorage или sessionStorage, генерируется событие storage со следующими свойствами:

key – ключ, который обновился (null, если вызван .clear()).
oldValue – старое значение (null, если ключ добавлен впервые).
newValue – новое значение (null, если ключ был удалён).
url – url документа, где произошло обновление.
storageArea – объект localStorage или sessionStorage, где произошло обновление.

Важно: событие срабатывает на всех остальных объектах window, где доступно хранилище,
кроме того окна, которое его вызвало.
